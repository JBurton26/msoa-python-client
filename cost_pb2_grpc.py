# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cost_pb2 as cost__pb2


class CostStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUnitCost = channel.unary_unary(
                '/Cost/GetUnitCost',
                request_serializer=cost__pb2.CostRequest.SerializeToString,
                response_deserializer=cost__pb2.CostResponse.FromString,
                )
        self.UpdateUnitCost = channel.unary_unary(
                '/Cost/UpdateUnitCost',
                request_serializer=cost__pb2.UpdateRequest.SerializeToString,
                response_deserializer=cost__pb2.UpdateResponse.FromString,
                )
        self.AddUnitCost = channel.unary_unary(
                '/Cost/AddUnitCost',
                request_serializer=cost__pb2.UpdateRequest.SerializeToString,
                response_deserializer=cost__pb2.UpdateResponse.FromString,
                )
        self.TotalBasket = channel.unary_unary(
                '/Cost/TotalBasket',
                request_serializer=cost__pb2.Basket.SerializeToString,
                response_deserializer=cost__pb2.CostResponse.FromString,
                )


class CostServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUnitCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUnitCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUnitCost(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TotalBasket(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CostServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUnitCost': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnitCost,
                    request_deserializer=cost__pb2.CostRequest.FromString,
                    response_serializer=cost__pb2.CostResponse.SerializeToString,
            ),
            'UpdateUnitCost': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUnitCost,
                    request_deserializer=cost__pb2.UpdateRequest.FromString,
                    response_serializer=cost__pb2.UpdateResponse.SerializeToString,
            ),
            'AddUnitCost': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUnitCost,
                    request_deserializer=cost__pb2.UpdateRequest.FromString,
                    response_serializer=cost__pb2.UpdateResponse.SerializeToString,
            ),
            'TotalBasket': grpc.unary_unary_rpc_method_handler(
                    servicer.TotalBasket,
                    request_deserializer=cost__pb2.Basket.FromString,
                    response_serializer=cost__pb2.CostResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Cost', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cost(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUnitCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cost/GetUnitCost',
            cost__pb2.CostRequest.SerializeToString,
            cost__pb2.CostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUnitCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cost/UpdateUnitCost',
            cost__pb2.UpdateRequest.SerializeToString,
            cost__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUnitCost(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cost/AddUnitCost',
            cost__pb2.UpdateRequest.SerializeToString,
            cost__pb2.UpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TotalBasket(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Cost/TotalBasket',
            cost__pb2.Basket.SerializeToString,
            cost__pb2.CostResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
